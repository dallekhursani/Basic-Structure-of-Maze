#include <iostream>
#include <vector>
#include <utility>

using namespace std;

const int N = 4, M = 4;

int maze[N][M] = {
    {0, 0, 1, 0},
    {1, 0, 1, 0},
    {0, 0, 0, 0},
    {1, 1, 1, 0}
};

bool visited[N][M] = {false};

vector<pair<int, int> > path; // space between >> is important

int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

bool isValid(int x, int y) {
    return x >= 0 && x < N && y >= 0 && y < M &&
           maze[x][y] == 0 && !visited[x][y];
}

bool dfs(int x, int y) {
    if (x == N - 1 && y == M - 1) {
        path.push_back(make_pair(x, y));
        return true;
    }

    visited[x][y] = true;

    for (int i = 0; i < 4; ++i) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        if (isValid(nx, ny)) {
            if (dfs(nx, ny)) {
                path.push_back(make_pair(x, y));
                return true;
            }
        }
    }

    return false;
}

int main() {
    cout << "Maze:\n";
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < M; ++j) {
            cout << maze[i][j] << " ";
        }
        cout << endl;
    }

    if (dfs(0, 0)) {
        cout << "\nPath from Start to End:\n";
        vector<pair<int, int> >::reverse_iterator it;
        for (it = path.rbegin(); it != path.rend(); ++it) {
            cout << "(" << it->first << ", " << it->second << ")\n";
        }
    } else {
        cout << "No path found!\n";
    }

    return 0;
}
